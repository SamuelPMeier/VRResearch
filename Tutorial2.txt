For OpenGL documentation, No direct links.
	https://www.khronos.org/registry/OpenGL-Refpages/gl4/

VBO vs VAO:
	A VBO, or Vertex Buffer Object, acts as a normal buffer object that contains data specifically
	pertaining to either vertex data on a shape or color data. A VAO contains a collection of VBOs
	
glGenBuffers:
	Creates object buffers for use in shaders. This function can be called for any Object Buffer type.
	
glGenVertexArrays:
	creates Vertex Array Objects, but only a declaration of use. The VAO does not know what type of 
	data it will be used for until bound.
	
glBindVertexArray:
	Binds a single vertex array, giving it the ability to be used by our shader language.
	
glBindBuffer:
	This will bind the given VBO to the currently active buffer, allowing for drawing, coloring or manipulation
	before the buffer is swapped and drawn
	
glBufferData:
	creates and initializes a buffer object's data store. this function will supply the buffer with information 
	pertaining to the currently stored buffer object. Information like what type it is, how big it is, 
	what the data is, and how it will be used.
	
glVertexAttribPointer:
	Inserts vertex data of the VBO currently in the buffer.
	
glEnableVertexAttribArray:
	Allows the VBO in the current buffer to be drawn.
	
glDrawArrays:
	Draws all enabled arrays from the starting index with the given data type.